#!/bin/sh

# Eventually the idea is that the other scripts and app are "installed" in the system and found on the PATH enviromental variable
DASH_TO_MAP="./dash2map"

help()
{
    echo
    echo "70mai Dash Cam Lite 2 timelapse and hud map video builder tool"
    echo
    echo "Syntax: $0 [option] [param] [option] [param] ..."
    echo
    echo "Options:"
    echo
    echo "      -h        Shows this help screen"
    echo
    echo "      -i DIR    Input directory containing the root directory of the SD written by the"
    echo "                dashcam (defaults to current directory)"
    echo
    echo "      -w DIR    Working directory for temporary files (defaults to /tmp/dashcam2VideoMap/)"
    echo
    echo "      -a DIR    Audio directory from where to read supported audio files to be used in the"
    echo "                final video (optional, if none, no audio is added)"
    echo
    echo "      -o FILE   Output video file (Extension defines the container, defaults to"
    echo "                mkv) (defaults to out.mkv)"
    echo
    echo "      -t FACTOR Time factor multiplier for timelapse (Must be greater than 0 and less or"
    echo "                equal than 1) (defaults to 1, no timelapse)"
    echo
    echo "      -m DIR    Map cahce dir (defaults to ~/.cache/dashmap)"
    echo
    echo "      -g APIKEY GeoAPIfy key"
}

INPUT_DIR="./"
TMP_DIR="/tmp/dashcam2VideoMap"
AUDIO_DIR=""
OUTPUT_FILE="./out.mkv"
TIMELAPSE_FACTOR=1
UNATENDED=false
DASHMAP_CACHE="${HOME}/.cache/dashmap"
GEOAPIFY_KEY=""

buildOutputFile(){
    BASE_NAME=${1%.*}
    EXTENSION=${1#$BASE_NAME.}

    if [ $EXTENSION = $BASE_NAME ]; then
        EXTENSION=""
    fi

    if [ "$EXTENSION" ]; then
        OUTPUT_FILE=$1
    else
        OUTPUT_FILE=$BASE_NAME.mkv
    fi
}

calculate_audio_length(){
    soxi -D "$1" 2>/dev/null
}

generateSoundtrack(){
    INPUT=$1
    LENGTH=$2
    OUTPUT=$3
    AUDIO_LENGTH=0
    MUSIC_FILES_COUNT=0
    ROUNDED_LENGTH=$(echo $LENGTH | sed 's/\.[0-9]*//g')

    TOTAL_LENGTH=0
    find $INPUT -type f | sort -R | while read FILE; do
        FILE_AUDIO_LENGTH=$(calculate_audio_length "$FILE")
        if [ -n "$FILE_AUDIO_LENGTH" ]; then 
            FILE_AUDIO_ROUNDED_LENGTH=$(echo $FILE_AUDIO_LENGTH | sed 's/\.[0-9]*//g')
            TOTAL_LENGTH=$((TOTAL_LENGTH+FILE_AUDIO_ROUNDED_LENGTH))

            if [ -n "$FILES" ]; then
                FILES="$FILES=$FILE"
            else
                FILES=$FILE
            fi

            if [ "$ROUNDED_LENGTH" -lt "$TOTAL_LENGTH" ]; then
                FILES="$FILES=$OUTPUT"
                IFS="="
                sox $FILES
                break
            fi
        fi
    done
}

while getopts "hi:w:a:o:t:yp:g:m:" option; do
    case $option in
        h)
            help
            exit;;
        i)
            INPUT_DIR=$OPTARG
            ;;
        w)
            TMP_DIR=$OPTARG
            ;;
        a)
            AUDIO_DIR=$OPTARG
            ;;
        o)
            buildOutputFile $OPTARG
            ;;
        t)
            TIMELAPSE_FACTOR=$OPTARG
            ;;
        y)
            UNATENDED=true
            ;;
        m)
            DASHMAP_CACHE=$OPTARG
            ;;
        g)
            GEOAPIFY_KEY=$OPTARG
            ;;
        \?)
            help
            exit;;
   esac
done

echo "Summary"
echo "~~~~~~~"
echo "Input:    $INPUT_DIR"
echo "Tmp:      $TMP_DIR"
echo "MapCachÃ¨: $DASHMAP_CACHE"
echo "Audio:    $AUDIO_DIR"
echo "Time:     $TIMELAPSE_FACTOR"
echo "Output:   $OUTPUT_FILE"
echo ""

if [ $UNATENDED = false ]; then
    read -n 1 -p "Start the process: [Y/n]: " ANSWER
    if [ "$ANSWER" = "n" ]; then
        exit
    fi
fi

echo "Starting the show!!"
echo -n "Joining all GPS data files..."
GPS_FILE=$TMP_DIR/gpsData.txt
mkdir -p $TMP_DIR
cat $INPUT_DIR/GPSData*.txt > $GPS_FILE
echo "[ OK ]"

echo -n "Building video file lists..."
echo > $TMP_DIR/front.txt
for FILE in $INPUT_DIR/Normal/Front/* ; do
    echo "file $FILE" >> $TMP_DIR/front.txt
done

BACK_CAMERA_PRESENT=0
if [ "$(ls -A $INPUT_DIR/Normal/Back/)" ]; then
    BACK_CAMERA_PRESENT=1
    echo > $TMP_DIR/back.txt
    for FILE in $INPUT_DIR/Normal/Back/* ; do
        echo "file $FILE" >> $TMP_DIR/back.txt
    done
fi

echo "[ OK ]"

mkdir -p $TMP_DIR/mapImgSeq
MAP_BUILD_CMD="$DASH_TO_MAP --frontvideo $INPUT_DIR/Normal/Front --outputdir $TMP_DIR/mapImgSeq --fps 30 --originaltimefactor $TIMELAPSE_FACTOR --gpsdatafile $GPS_FILE --geoapifykey $GEOAPIFY_KEY --mapcachedir $DASHMAP_CACHE"

$MAP_BUILD_CMD

echo "Calculating total video duration..."
TOTAL_DURATION=`for FILE in $INPUT_DIR/Normal/Front/*
do ffprobe -v quiet -of csv=p=0 -show_entries format=duration "$FILE"
done | awk '{sum += $1}; END{print sum}'`

TOTAL_DURATION=$(echo "$TOTAL_DURATION*$TIMELAPSE_FACTOR"|bc)

echo "Building soundtrack..."
generateSoundtrack $AUDIO_DIR $TOTAL_DURATION $TMP_DIR/music.mp3

echo "Building final video..."

# Front camera input
FFMPEG_INPUT_FRONT="-f concat -safe 0 -i $TMP_DIR/front.txt"

# Map input
FFMPEG_INPUT_MAP="-r 30 -pattern_type glob -i '$TMP_DIR/mapImgSeq/*.png'"

# Back camera input if available
if [ $BACK_CAMERA_PRESENT == 1 ]; then
    FFMPEG_INPUT_BACK="-f concat -safe 0 -i $TMP_DIR/back.txt"
fi

# Music input
FFMPEG_MUSIC_INPUT="-i $TMP_DIR/music.mp3"

# Front camera timelapse
FFMPEG_FILTER="[0:v]setpts=expr=$TIMELAPSE_FACTOR*PTS[timelapsedfront];"

# Back camera timelapse if available
if [ $BACK_CAMERA_PRESENT == 1 ]; then
    FFMPEG_INPUT_BACK="-f concat -safe 0 -i $TMP_DIR/back.txt"
    FFMPEG_FILTER="$FFMPEG_FILTER[2:v]setpts=expr=$TIMELAPSE_FACTOR*PTS[timelapsedback];"
fi

# Front camera crop and scale
FFMPEG_FILTER="$FFMPEG_FILTER[timelapsedfront]scale=w=1920:h=-1,crop=w=1920:h=1080:x=0:y=240"

# Back camera crop, scale and overlay if present
if [ $BACK_CAMERA_PRESENT == 1 ]; then
    FFMPEG_FILTER="$FFMPEG_FILTER[cleanfront];"
    FFMPEG_FILTER="$FFMPEG_FILTER[timelapsedback]scale=w=640:h=-1,crop=w=640:h=240:x=0:y=50[cleanback];"
    FFMPEG_FILTER="$FFMPEG_FILTER[cleanfront][cleanback]overlay=x=640:y=100[bothcameras];"
else
    FFMPEG_FILTER="$FFMPEG_FILTER[bothcameras];"
fi

# Map overlay
FFMPEG_FILTER="$FFMPEG_FILTER[bothcameras][1:v]overlay=x=1644:y=804[bothcameraswithmap];"

if [ $BACK_CAMERA_PRESENT == 1 ]; then
    AUDIO_INPUT_NAME="3"
else
    AUDIO_INPUT_NAME="2"
fi

FADE_OUT_START=`echo $TOTAL_DURATION - 1 | bc`

# Fade in/out
FFMPEG_FILTER="$FFMPEG_FILTER[bothcameraswithmap]fade=in:0:d=1,fade=t=out:st=$FADE_OUT_START:d=1[finalrender_v];"

# Audio Fade in/out
FFMPEG_FILTER="$FFMPEG_FILTER[$AUDIO_INPUT_NAME]afade=in:0:d=1,afade=t=out:st=$FADE_OUT_START:d=1[finalrender_a];"

# Compression
FFMPEG_FORMAT="-c:v libx265 -preset slow -c:a aac -b:a 128k"

FFMPEG_CMD="ffmpeg $FFMPEG_INPUT_FRONT $FFMPEG_INPUT_MAP $FFMPEG_INPUT_BACK $FFMPEG_MUSIC_INPUT -filter_complex \"$FFMPEG_FILTER\" -map \"[finalrender_a]\" -map \"[finalrender_v]\" -shortest $FFMPEG_FORMAT $OUTPUT_FILE"

echo $FFMPEG_CMD

echo "Ding!! -- All done"